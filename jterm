#!/usr/bin/perl
# Copyright 1997 Jim Radford
# Verstion 3.0
#use strict;

use Getopt::Long;
use Pod::Usage;
use IPC::Cmd qw(can_run);

my $quit_on_break = 0;
GetOptions("h"    => sub { pod2usage(0) },
           "help" => sub { pod2usage(-exitval => 0, -verbose => 2, -perldocopt => '-oman') },
           "quit-on-break!" => \$quit_on_break,
          ) or pod2usage(1);

$0 =~ s@.*/@@;

my $serial = shift || ($0 eq 'com2' ? "/dev/ttyS1" : "/dev/ttyS0");
my $speed  = shift || 115200;

eval 'use Term::ReadLine;1;' or eval 'sub Term::ReadLine::new {sub Term::ReadLine::readline {print STDERR $_[1]; my $f=<>;chomp $f;$f}; bless {},Term::ReadLine}';

eval 'use Term::ReadKey;1;' and $SIG{WINCH} = sub {my $wc=sprintf(";%dx%d\r", GetTerminalSize()); 
                                                   length $wc == syswrite SERIAL, $wc, length($wc) or die "$0: winch: $!"; };

open(SERIAL,"+>$serial") or die "$0: couldn't open $serial: $!\n";

system('sh', '-c', 'stty raw -echo parmrk ispeed "$2" ospeed "$2" <"$1" >"$1" 2>&1', 'sh', $serial, $speed) == 0 || die "Couldn't configure $serial";

sub raw    {system("stty raw -echo </dev/tty >/dev/tty 2>&1") == 0 || die "Couldn't set raw mode on STDIN"    ;} # unbuffer STDIN
sub cooked {system("stty -raw echo </dev/tty >/dev/tty 2>&1") == 0 || die "Couldn't set cooked mode on STDIN" ;} # rebuffer STDIN

raw();

my $q = '';
my($rin,$rout) = ('',''); vec($rin,fileno(STDIN),1) = vec($rin,fileno(SERIAL),1) = 1;
while(my $n = select($rout=$rin, undef, undef, undef)) {
    next if $n < 0;
    if(vec($rout,fileno(STDIN),1)) {
        my($in) = '';
        my($len) = sysread STDIN,$in,200 or die "$0: key read: $!\r\n";

        my @in;
        for (@in = split //, $in) {
            my $state if undef; # static variable trick
            if (defined $state and $state eq "wait for command") {
                /~/ && next;
                s/\.// && exit 0;
                s/x// and can_run('sx') and &cooked,($xmodem = new Term::ReadLine($0)->readline("xmodem file> ")),&raw;
                s/x// and !can_run('sx') and print STDERR "Can't send with xmodem: 'xs' binary is not available (try installing the 'lrzsz' package)";
                s/.// && print STDERR "Expecting '~', '?', or '.'.\r\n";
                $state = "wait for tilde";
            } elsif (/\r/) {
                $state = "wait for tilde";
            } elsif ((!defined $state or $state eq "wait for tilde") and s/~//) {
                $state = "wait for command";
            } else {
                $state = "wait for return";
            }
        }
        $in = join '', @in; $len = length $in;

        $len == syswrite SERIAL,$in,$len or die "$0: write: $!\r\n";
    }
    if(vec($rout,fileno(SERIAL),1)) {
        my($in) = '';
        my($len) = sysread SERIAL,$in,200 or die "$0: ser read: $!\r\n";
        my $quit = $quit_on_break && $in =~ s/\377\000\000.*//g; # Quit on break
        length($in) == syswrite STDOUT,$in,length($in) or die "$0: write: $!\r\n";
        last if $quit;
        #map{printf("%02x '%c'\r\n",ord($_),/\w/?ord($_):'.')} split //,$in;
        $xmodem and &cooked,system("sh", "-c" , 'sx "$2" <"$1" >"$1"', 'sh', $serial, $xmodem),&raw,undef $xmodem;
    }
}

END   { &cooked; print "\n" }

__END__

=encoding utf-8

=head1 NAME

jterm - A very simple "terminal program" for communicating with a serial port.

=head1 SYNOPSIS

jterm [options] [<serial-device> [<baud-rate>]]

  Options:
    -h, --help           Show usage
    --quit-on-break      Quit if the serial device sends a "break".

  If <serial-device> is not specified then '/dev/ttyS0' will be used.
  if <baud-rate> is not specified then 115200 will be used.


=head1 OPTIONS

=over 8

=item B<-h>, B<--help>

Print the usage and exit.

=item B<--quit-on-break>

If enabled, B<jterm> will quit when receiving a
L<break|https://en.wikipedia.org/wiki/UART#Break_condition> from the serial
device.

=back

=head1 DESCRIPTION

B<jterm> connects to a serial port, transmitting the terminal's input to the
serial port's Rx and printing the serial port's Tx data to the terminal.

Once B<jterm> connects it will capture I<all> terminal inputâ€”this includes
keys that are normally used for job control (C<Control-C>, C<Control-Z>,
C<Control-\>, etc).

=head2 Quitting

B<To quit jterm enter C<~.> on a new line.>

B<NOTE>: C<~.> is also the
sequence that B<ssh> uses to disconnect so if you are running jterm from an
ssh session then you will need to enter 2 tildes (C<~~>) (the ssh client
will see the 2 tildes and only send one across the ssh connection).

=head2 Sending A File With XMODEM

To send a file over the serial port via the L<XMODEM
protocol|https://en.wikipedia.org/wiki/XMODEM>, enter C<~x> on a new line
(see note above). B<jterm> will prompt you for a filename and will then
attempt to send the specified file with the B<sx> binary. This is part of
L<lrzsz|https://ohse.de/uwe/software/lrzsz.html> which should be available
in your local package manager.


=cut
